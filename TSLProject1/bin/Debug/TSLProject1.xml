<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TSLProject1</name>
    </assembly>
    <members>
        <member name="T:TSLProject1.StartSSSPMessage">
            <summary>
            A .NET runtime object representation of StartSSSPMessage defined in TSL.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the StartSSSPMessage class with the specified parameters.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage.TryParse(System.String,TSLProject1.StartSSSPMessage@)">
            <summary>
            Converts the string representation of a StartSSSPMessage to its
            struct equivalent. A return value indicates whether the 
            operation succeeded.
            </summary>
            <param name="input">A string to convert.</param>
            <param name="value">
            When this method returns, contains the struct equivalent of the value contained 
            in input, if the conversion succeeded, or default(StartSSSPMessage) if the conversion
            failed. The conversion fails if the input parameter is null or String.Empty, or is 
            not of the correct format. This parameter is passed uninitialized. 
            </param>
            <returns>True if input was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage.ToString">
            <summary>
            Serializes this object to a Json string.
            </summary>
            <returns>The Json string serialized.</returns>
        </member>
        <member name="T:TSLProject1.StartSSSPMessage_Accessor">
            <summary>
            Provides in-place operations of StartSSSPMessage defined in TSL.
            </summary>
        </member>
        <member name="F:TSLProject1.StartSSSPMessage_Accessor.CellPtr">
            <summary>
            The pointer to the content of the object.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor.GetOptionalFieldNames">
            <summary>
            Get an array of the names of all optional fields for object type StartSSSPMessage.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor.GetNotNullOptionalFields">
            <summary>
            Get a list of the names of available optional fields in the object being operated by this accessor.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor.ToByteArray">
            <summary>
            Copies the struct content into a byte array.
            </summary>
        </member>
        <member name="P:TSLProject1.StartSSSPMessage_Accessor.root">
            <summary>
            Provides in-place access to the object field root.
            </summary>
        </member>
        <member name="T:TSLProject1.StartSSSPMessage_Accessor_ReadOnly">
            <summary>
            Provides in-place operations of StartSSSPMessage defined in TSL.
            </summary>
        </member>
        <member name="F:TSLProject1.StartSSSPMessage_Accessor_ReadOnly.CellPtr">
            <summary>
            The pointer to the content of the object.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor_ReadOnly.GetOptionalFieldNames">
            <summary>
            Get an array of the names of all optional fields for object type StartSSSPMessage.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor_ReadOnly.GetNotNullOptionalFields">
            <summary>
            Get a list of the names of available optional fields in the object being operated by this accessor.
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessage_Accessor_ReadOnly.ToByteArray">
            <summary>
            Copies the struct content into a byte array.
            </summary>
        </member>
        <member name="P:TSLProject1.StartSSSPMessage_Accessor_ReadOnly.root">
            <summary>
            Provides in-place access to the object field root.
            </summary>
        </member>
        <member name="T:TSLProject1.DistanceUpdatingMessage">
            <summary>
            A .NET runtime object representation of DistanceUpdatingMessage defined in TSL.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage.#ctor(System.Int64,System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Initializes a new instance of the DistanceUpdatingMessage class with the specified parameters.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage.TryParse(System.String,TSLProject1.DistanceUpdatingMessage@)">
            <summary>
            Converts the string representation of a DistanceUpdatingMessage to its
            struct equivalent. A return value indicates whether the 
            operation succeeded.
            </summary>
            <param name="input">A string to convert.</param>
            <param name="value">
            When this method returns, contains the struct equivalent of the value contained 
            in input, if the conversion succeeded, or default(DistanceUpdatingMessage) if the conversion
            failed. The conversion fails if the input parameter is null or String.Empty, or is 
            not of the correct format. This parameter is passed uninitialized. 
            </param>
            <returns>True if input was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage.ToString">
            <summary>
            Serializes this object to a Json string.
            </summary>
            <returns>The Json string serialized.</returns>
        </member>
        <member name="T:TSLProject1.DistanceUpdatingMessage_Accessor">
            <summary>
            Provides in-place operations of DistanceUpdatingMessage defined in TSL.
            </summary>
        </member>
        <member name="F:TSLProject1.DistanceUpdatingMessage_Accessor.CellPtr">
            <summary>
            The pointer to the content of the object.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor.GetOptionalFieldNames">
            <summary>
            Get an array of the names of all optional fields for object type DistanceUpdatingMessage.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor.GetNotNullOptionalFields">
            <summary>
            Get a list of the names of available optional fields in the object being operated by this accessor.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor.ToByteArray">
            <summary>
            Copies the struct content into a byte array.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor.senderId">
            <summary>
            Provides in-place access to the object field senderId.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor.distance">
            <summary>
            Provides in-place access to the object field distance.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor.recipients">
            <summary>
            Provides in-place access to the object field recipients.
            </summary>
        </member>
        <member name="T:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly">
            <summary>
            Provides in-place operations of DistanceUpdatingMessage defined in TSL.
            </summary>
        </member>
        <member name="F:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.CellPtr">
            <summary>
            The pointer to the content of the object.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.GetOptionalFieldNames">
            <summary>
            Get an array of the names of all optional fields for object type DistanceUpdatingMessage.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.GetNotNullOptionalFields">
            <summary>
            Get a list of the names of available optional fields in the object being operated by this accessor.
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.ToByteArray">
            <summary>
            Copies the struct content into a byte array.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.senderId">
            <summary>
            Provides in-place access to the object field senderId.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.distance">
            <summary>
            Provides in-place access to the object field distance.
            </summary>
        </member>
        <member name="P:TSLProject1.DistanceUpdatingMessage_Accessor_ReadOnly.recipients">
            <summary>
            Provides in-place access to the object field recipients.
            </summary>
        </member>
        <member name="T:TSLProject1.SSSPCell">
            <summary>
            A .NET runtime object representation of SSSPCell defined in TSL.
            </summary>
        </member>
        <member name="F:TSLProject1.SSSPCell.CellID">
            <summary>
            The id of the cell.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell.#ctor(System.Int64,System.Int32,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Initializes a new cell of the type SSSPCell with the specified parameters.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell.#ctor(System.Int32,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Initializes a new instance of the SSSPCell class with the specified parameters.
            </summary>
        </member>
        <!-- 对于成员“M:TSLProject1.SSSPCell.TryParse(System.String,TSLProject1.SSSPCell@)”忽略有格式错误的 XML 注释 -->
        <member name="M:TSLProject1.SSSPCell.ToString">
            <summary>Converts a SSSPCell to its string representation, in JSON format.</summary>
            <returns>A string representation of the SSSPCell.</returns>
        </member>
        <member name="M:TSLProject1.SSSPCell.GetField``1(System.String)">
            <summary>
            Get the field of the specified name in the cell.
            </summary>
            <typeparam name="T">
            The desired type that the field is supposed 
            to be intepreted as. Automatic type casting 
            will be attempted if the desired type is not 
            implicitly convertible from the type of the field.
            </typeparam>
            <param name="fieldName">The name of the target field.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:TSLProject1.SSSPCell.SetField``1(System.String,``0)">
            <summary>
            Set the value of the target field.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="fieldName">The name of the target field.</param>
            <param name="value">
            The value of the field. Automatic type casting 
            will be attempted if the desired type is not 
            implicitly convertible from the type of the field.
            </param>
        </member>
        <member name="M:TSLProject1.SSSPCell.ContainsField(System.String)">
            <summary>
            Tells if a field with the given name exists in the current cell.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <returns>The existence of the field.</returns>
        </member>
        <member name="M:TSLProject1.SSSPCell.AppendToField``1(System.String,``0)">
            <summary>
            Append <paramref name="value"/> to the target field. Note that if the target field
            is not appendable(string or list), calling this method is equivalent to <see cref="!:TSLProject1.GenericCellAccessor.SetField(string, T)"/>.
            </summary>
            <typeparam name="T">
            The type of the value.
            </typeparam>
            <param name="fieldName">The name of the target field.</param>
            <param name="value">The value to be appended. 
            If the value is incompatible with the element 
            type of the field, automatic type casting will be attempted.
            </param>
        </member>
        <member name="T:TSLProject1.SSSPCell_Accessor">
            <summary>
            Provides in-place operations of SSSPCell defined in TSL.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.GetOptionalFieldNames">
            <summary>
            Get an array of the names of all optional fields for object type SSSPCell.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.GetNotNullOptionalFields">
            <summary>
            Get a list of the names of available optional fields in the object being operated by this accessor.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.ToByteArray">
            <summary>
            Copies the cell content into a byte array.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.Dispose">
            <summary>
            Dispose the accessor.
            If <c><see cref="P:Trinity.TrinityConfig.ReadOnly"/> == false</c>,
            the cell lock will be released.
            If write-ahead-log behavior is specified on <see cref="M:TSLProject1.StorageExtension_SSSPCell.UseSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64,Trinity.TSL.Lib.CellAccessOptions)"/>,
            the changes will be committed to the write-ahead log.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.GetCellType">
            <summary>
            Get the cell type id.
            </summary>
            <returns>A 16-bit unsigned integer representing the cell type id.</returns>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.ToString">
            <summary>Converts a SSSPCell_Accessor to its string representation, in JSON format.</summary>
            <returns>A string representation of the SSSPCell.</returns>
        </member>
        <member name="M:TSLProject1.SSSPCell_Accessor.ContainsField(System.String)">
            <summary>
            Tells if a field with the given name exists in the current cell.
            </summary>
            <param name="fieldName">The name of the field.</param>
            <returns>The existence of the field.</returns>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.distance">
            <summary>
            Provides in-place access to the object field distance.
            </summary>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.parent">
            <summary>
            Provides in-place access to the object field parent.
            </summary>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.neighbors">
            <summary>
            Provides in-place access to the object field neighbors.
            </summary>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.CellPtr">
            <summary>
            Get a pointer to the underlying raw binary blob. Take caution when accessing data with
            the raw pointer, as no boundary checks are employed, and improper operations will cause data corruption and/or system crash.
            </summary>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.CellSize">
            <summary>
            Get the size of the cell content, in bytes.
            </summary>
        </member>
        <member name="P:TSLProject1.SSSPCell_Accessor.CellID">
            <summary>
            Get the cell id. The value can be null when the id is undefined.
            </summary>
        </member>
        <member name="T:TSLProject1.SSSPServerBase">
            <summary>
            Represents the base class of SSSPServer defined in TSL.
            Inherit from this class to implement the logic of the server/proxy.
            </summary>
        </member>
        <member name="M:TSLProject1.SSSPServerBase.RootHttpHandler(System.Net.HttpListenerContext)">
            <summary>
            Processes requests on the root endpoint. By default it
            will list available API endpoints in html.
            Override this method to get custom behaviors.
            </summary>
            <param name="ctx">A <see cref="T:System.Net.HttpListenerContext"/> object.</param>
        </member>
        <member name="T:TSLProject1.DistanceUpdatingMessageReader">
            <summary>
            Represents a read-only accessor on the message of type DistanceUpdatingMessage defined in the TSL protocols.
            The message readers will be instantiated by the system and passed to user's logic.
            After finished accessing the message. It is the user's responsibility to call Dispose()
            on the reader object. Recommend wrapping the reader with a <c>using Statement block</c>.
            <seealso ref="https://msdn.microsoft.com/en-us/library/yh598w02.aspx"/>
            </summary>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessageReader.Dispose">
            <summary>
            Dispose the message reader and release the memory resource.
            It is the user's responsibility to call this method after finished accessing the message.
            </summary>
        </member>
        <member name="T:TSLProject1.DistanceUpdatingMessageWriter">
            <summary>
            Represents a writer accessor on the message of type DistanceUpdatingMessage defined in the TSL protocols.
            The message writers should be instantiated by the user's logic and passed to the system to send it out.
            After finished accessing the message. It is the user's responsibility to call Dispose()
            on the writer object. Recommend wrapping the reader with a <c>using Statement block</c>.
            </summary>
            <seealso ref="https://msdn.microsoft.com/en-us/library/yh598w02.aspx"/>
            <remarks>Calling <c>Dispose()</c> does not send the message out.</remarks>
        </member>
        <member name="M:TSLProject1.DistanceUpdatingMessageWriter.Dispose">
            <summary>
            Dispose the message writer and release the memory resource.
            It is the user's responsibility to call this method after finished accessing the message.
            </summary>
        </member>
        <member name="T:TSLProject1.StartSSSPMessageReader">
            <summary>
            Represents a read-only accessor on the message of type StartSSSPMessage defined in the TSL protocols.
            The message readers will be instantiated by the system and passed to user's logic.
            After finished accessing the message. It is the user's responsibility to call Dispose()
            on the reader object. Recommend wrapping the reader with a <c>using Statement block</c>.
            <seealso ref="https://msdn.microsoft.com/en-us/library/yh598w02.aspx"/>
            </summary>
        </member>
        <member name="M:TSLProject1.StartSSSPMessageReader.Dispose">
            <summary>
            Dispose the message reader and release the memory resource.
            It is the user's responsibility to call this method after finished accessing the message.
            </summary>
        </member>
        <member name="T:TSLProject1.StartSSSPMessageWriter">
            <summary>
            Represents a writer accessor on the message of type StartSSSPMessage defined in the TSL protocols.
            The message writers should be instantiated by the user's logic and passed to the system to send it out.
            After finished accessing the message. It is the user's responsibility to call Dispose()
            on the writer object. Recommend wrapping the reader with a <c>using Statement block</c>.
            </summary>
            <seealso ref="https://msdn.microsoft.com/en-us/library/yh598w02.aspx"/>
            <remarks>Calling <c>Dispose()</c> does not send the message out.</remarks>
        </member>
        <member name="M:TSLProject1.StartSSSPMessageWriter.Dispose">
            <summary>
            Dispose the message writer and release the memory resource.
            It is the user's responsibility to call this method after finished accessing the message.
            </summary>
        </member>
        <!-- 对于成员“T:TSLProject1.StorageExtension_SSSPCell”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64,System.Int32,System.Int64,System.Collections.Generic.List{System.Int64})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <member name="M:TSLProject1.StorageExtension_SSSPCell.UseSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64,Trinity.TSL.Lib.CellAccessOptions)">
            <summary>
            Allocate a cell accessor on the specified cell, which inteprets
            the cell as a SSSPCell. Any changes done to the accessor
            are written to the storage immediately.
            If <c><see cref="P:Trinity.TrinityConfig.ReadOnly"/> == false</c>,
            on calling this method, it attempts to acquire the lock of the cell,
            and blocks until it gets the lock. Otherwise this method is wait-free.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.LocalMemoryStorage"/> instance.</param>
            <param name="CellId">The id of the specified cell.</param>
            <param name="options">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
            <returns>A <see cref="T:TSLProject1.SSSPCell"/> instance.</returns>
        </member>
        <member name="M:TSLProject1.StorageExtension_SSSPCell.UseSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64)">
            <summary>
            Allocate a cell accessor on the specified cell, which inteprets
            the cell as a SSSPCell. Any changes done to the accessor
            are written to the storage immediately.
            If <c><see cref="P:Trinity.TrinityConfig.ReadOnly"/> == false</c>,
            on calling this method, it attempts to acquire the lock of the cell,
            and blocks until it gets the lock.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.LocalMemoryStorage"/> instance.</param>
            <param name="CellId">The id of the specified cell.</param>
            <returns>A <see cref="T:TSLProject1.SSSPCell"/> instance.</returns>
        </member>
        <member name="M:TSLProject1.StorageExtension_SSSPCell.LoadSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64)">
            <summary>
            Loads the content of the specified cell. Any changes done to this object are not written to the store, unless
            the content object is saved back into the storage.
            </summary>
        </member>
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,Trinity.TSL.Lib.CellAccessOptions,System.Int64,System.Int32,System.Int64,System.Collections.Generic.List{System.Int64})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,Trinity.TSL.Lib.CellAccessOptions,System.Int64,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.LocalMemoryStorage,Trinity.TSL.Lib.CellAccessOptions,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.MemoryCloud,System.Int64,System.Int32,System.Int64,System.Collections.Generic.List{System.Int64})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.MemoryCloud,System.Int64,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.StorageExtension_SSSPCell.SaveSSSPCell(Trinity.Storage.MemoryCloud,TSLProject1.SSSPCell)”忽略有格式错误的 XML 注释 -->
        <member name="M:TSLProject1.StorageExtension_SSSPCell.LoadSSSPCell(Trinity.Storage.MemoryCloud,System.Int64)">
            <summary>
            Loads the content of the specified cell. Any changes done to this object are not written to the store, unless
            the content object is saved back into the storage.
            </summary>
        </member>
        <member name="T:TSLProject1.Storage_CellType_Extension">
            <summary>
            Provides cell type interfaces on <see cref="T:Trinity.Storage.LocalMemoryStorage"/>.
            </summary>
        </member>
        <!-- 对于成员“M:TSLProject1.Storage_CellType_Extension.IsSSSPCell(Trinity.Storage.LocalMemoryStorage,System.Int64)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:TSLProject1.Storage_CellType_Extension.GetCellType(Trinity.Storage.LocalMemoryStorage,System.Int64)”忽略有格式错误的 XML 注释 -->
        <member name="T:TSLProject1.GenericCellOperations">
            <summary>
            Exposes Load/Save/New operations of <see cref="T:Trinity.Storage.ICell"/> and Use operation on <see cref="T:Trinity.Storage.ICellAccessor"/> on <see cref="T:Trinity.Storage.LocalMemoryStorage"/> and <see cref="T:Trinity.Storage.MemoryCloud"/>.
            </summary>
        </member>
        <member name="M:TSLProject1.GenericCellOperations.UseGenericCell(Trinity.Storage.LocalMemoryStorage,System.Int64,Trinity.TSL.Lib.CellAccessOptions)">
            <summary>
            Allocate a generic cell accessor on the specified cell.
            If <c><see cref="P:Trinity.TrinityConfig.ReadOnly"/> == false</c>,
            on calling this method, it attempts to acquire the lock of the cell,
            and blocks until it gets the lock.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.LocalMemoryStorage"/> instance.</param>
            <param name="CellId">The id of the specified cell.</param>
            <param name="options">Specifies write-ahead logging behavior. Valid values are CellAccessOptions.StrongLogAhead(default) and CellAccessOptions.WeakLogAhead. Other values are ignored.</param>
            <returns>A <see cref="!:TSLProject1.GenericCellAccessor"/> instance.</returns>
        </member>
        <member name="M:TSLProject1.GenericCellOperations.SaveGenericCell(Trinity.Storage.MemoryCloud,Trinity.Storage.ICell)">
            <summary>
            Adds a new cell to the key-value store if the cell Id does not exist, or updates an existing cell in the key-value store if the cell Id already exists.
            Note that the generic cell will be saved as a strongly typed cell. It can then be loaded into either a strongly-typed cell or a generic cell.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.MemoryCloud"/> instance.</param>
            <param name="cell">The cell to be saved.</param>
        </member>
        <member name="M:TSLProject1.GenericCellOperations.LoadGenericCell(Trinity.Storage.MemoryCloud,System.Int64)">
            <summary>
            Loads the content of the cell with the specified cell Id.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.MemoryCloud"/> instance.</param>
            <param name="cellId">A 64-bit cell Id.</param>
            <returns></returns>
        </member>
        <member name="T:TSLProject1.StorageSchema">
            <summary>
            Exposes the data modeling schema defined in the TSL.
            </summary>
        </member>
        <member name="M:TSLProject1.StorageSchema.GetCellType(System.String)">
            <summary>
            Converts a type string to <see cref="T:TSLProject1.CellType"/>.
            </summary>
            <param name="cellTypeString">The type string to be converted.</param>
            <returns>The converted cell type.</returns>
        </member>
        <member name="P:TSLProject1.StorageSchema.SSSPCell">
            <summary>
            Get the cell descriptor for SSSPCell.
            </summary>
        </member>
        <member name="P:TSLProject1.StorageSchema.CellDescriptors">
            <summary>
            Enumerates descriptors for all cells defined in the TSL.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int32}#Enumerate_int(System.Int32)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int32}#Enumerate_long(System.Int32)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int32}#Enumerate_string(System.Int32)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int32}#Enumerate_List_long(System.Int32)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int32}#Enumerate_List_string(System.Int32)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int64}#Enumerate_int(System.Int64)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int64}#Enumerate_long(System.Int64)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int64}#Enumerate_string(System.Int64)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int64}#Enumerate_List_long(System.Int64)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Int64}#Enumerate_List_string(System.Int64)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#String}#Enumerate_int(System.String)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#String}#Enumerate_long(System.String)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#String}#Enumerate_string(System.String)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#String}#Enumerate_List_long(System.String)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#String}#Enumerate_List_string(System.String)">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#Int64}}#Enumerate_int(System.Collections.Generic.List{System.Int64})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#Int64}}#Enumerate_long(System.Collections.Generic.List{System.Int64})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#Int64}}#Enumerate_string(System.Collections.Generic.List{System.Int64})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#Int64}}#Enumerate_List_long(System.Collections.Generic.List{System.Int64})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#Int64}}#Enumerate_List_string(System.Collections.Generic.List{System.Int64})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#String}}#Enumerate_int(System.Collections.Generic.List{System.String})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#String}}#Enumerate_long(System.Collections.Generic.List{System.String})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#String}}#Enumerate_string(System.Collections.Generic.List{System.String})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#String}}#Enumerate_List_long(System.Collections.Generic.List{System.String})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="M:TSLProject1.TypeConverter`1._TypeConverterImpl.TSLProject1#ITypeConverter{System#Collections#Generic#List{System#String}}#Enumerate_List_string(System.Collections.Generic.List{System.String})">
            <summary>
            ONLY VALID FOR TC_CONVERTLIST AND TC_ARRAYTOLIST.
            </summary>
        </member>
        <member name="T:TSLProject1.TSL.TrinityServer.SSSPServer.SynReqMessageType">
            <summary>
            Specifies the type of a synchronous request (without response, that is, response type is void) message.
            </summary>
        </member>
        <member name="T:TSLProject1.TSL.TrinityServer.SSSPServer.SynReqRspMessageType">
            <summary>
            Specifies the type of a synchronous request (with response) message.
            </summary>
        </member>
        <member name="T:TSLProject1.TSL.TrinityServer.SSSPServer.AsynReqMessageType">
            <summary>
            Specifies the type of an asynchronous request (without response) message.
            </summary>
            <remarks>Note that asynchronous message with response is not supported.</remarks>
        </member>
        <member name="T:TSLProject1.Serializer">
            <summary>
            Provides facilities for serializing data to Json strings.
            </summary>
        </member>
        <member name="M:TSLProject1.Serializer.ToString(TSLProject1.SSSPCell)">
            <summary>
            Serializes a SSSPCell object to Json string.
            </summary>
            <param name="value">The target cell object to be serialized.</param>
            <returns>The serialized Json string.</returns>
        </member>
        <member name="T:TSLProject1.SSSPCell_Accessor_local_projector`1">
            <summary>
            Accepts transformation from SSSPCell_Accessor to T.
            </summary>
        </member>
        <member name="T:TSLProject1.SSSPCell_local_projector`1">
            Accepts transformation from SSSPCell to T.
        </member>
        <member name="T:TSLProject1.SSSPCell_Accessor_local_selector">
            <summary>
            Implements System.Linq.IQueryable{SSSPCell_Accessor} and accepts LINQ
            queries on <see cref="P:Trinity.Global.LocalStorage"/>.
            </summary>
        </member>
        <member name="T:TSLProject1.SSSPCell_local_selector">
            <summary>
            Implements System.Linq.IQueryable{SSSPCell} and accepts LINQ
            queries on <see cref="P:Trinity.Global.LocalStorage"/>.
            </summary>
        </member>
        <member name="M:TSLProject1.LocalStorageCellSelectorExternsion.SSSPCell_Selector(Trinity.Storage.LocalMemoryStorage)">
            <summary>
            Enumerates all the SSSPCell within the local memory storage.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.LocalMemoryStorage"/> object.</param>
            <returns>All the SSSPCell within the local memory storage.</returns>
        </member>
        <member name="M:TSLProject1.LocalStorageCellSelectorExternsion.SSSPCell_Accessor_Selector(Trinity.Storage.LocalMemoryStorage)">
            <summary>
            Enumerates all the SSSPCell_Accessor within the local memory storage.
            </summary>
            <param name="storage">A <see cref="T:Trinity.Storage.LocalMemoryStorage"/> object.</param>
            <returns>All the SSSPCell_Accessor within the local memory storage.</returns>
        </member>
        <member name="T:TSLProject1.Index">
            <summary>
            Provides indexing capabilities on <see cref="T:Trinity.Storage.LocalMemoryStorage"/>.
            The target field to query on is specified with <paramref name="query"/>, <seealso cref="!:TSLProject1.IndexIdentifier"/>.
            </summary>
        </member>
        <member name="M:TSLProject1.Index.SubstringQuery(TSLProject1.Index.IndexIdentifier,System.String)">
            <summary>
            Performs a substring query on <see cref="P:Trinity.Global.LocalStorage"/>.
            The target field to query on is specified with <paramref name="query"/>, <seealso cref="!:TSLProject1.IndexIdentifier"/>.
            </summary>
            <param name="index_id">The identifier of the field that the query should be performed on.</param>
            <param name="query">The query string.</param>
            <returns>
            A list of cell ids, of which the given query string is a substring of the field, or a substring of
            an element if the target field is a container of strings.
            </returns>
        </member>
        <member name="M:TSLProject1.Index.SubstringQuery(TSLProject1.Index.IndexIdentifier,System.Collections.Generic.List{System.String})">
            <summary>
            Performs a substring sequence query on <see cref="P:Trinity.Global.LocalStorage"/>. The semantics of
            this type of query is that, given a sequence of query strings <c>q_1, q_2,...,q_n</c> in 
            <paramref name="query"/>, the match condition on a target string is that all the strings in the sequence
            are the substrings of the target string, and the order of the substring occurances should correspond
            strictly to that given by <paramref name="query"/>. For example (let <c>S</c> denote the target string):
            <example>
            <list type="bullet">
            <item>
            <c>S=..q1....q2..q3{and so on}...qn...</c> is a match.
            </item>
            <item>
            <c>S=.....q1q2..q4{and there are missing substrings in the sequence}...qn...</c> is not match.
            </item>
            <item>
            <c>S=..q5..q3.q1{all the substrings in the sequence are present, but never in the corresponding order}...qn...</c> is not match.
            </item>
            </list>
            </example>
            The target field to query on is specified with <paramref name="query"/>, <seealso cref="!:TSLProject1.IndexIdentifier"/>.
            </summary>
            <param name="index_id">The identifier of the field that the query should be performed on.</param>
            <param name="query">The sequence of query strings.</param>
            <returns>
            A list of cell ids, of which the given query string sequence is matched on the target field, or
            an element it if it is a container of strings.
            </returns>
        </member>
        <member name="M:TSLProject1.Index.SubstringQuery(TSLProject1.Index.IndexIdentifier,System.String[])">
            <summary>
            Performs a substring sequence query on <see cref="P:Trinity.Global.LocalStorage"/>. The semantics of
            this type of query is that, given a sequence of query strings <c>q_1, q_2,...,q_n</c> in 
            <paramref name="query"/>, the match condition on a target string is that all the strings in the sequence
            are the substrings of the target string, and the order of the substring occurances should correspond
            strictly to that given by <paramref name="query"/>. For example (let <c>S</c> denote the target string):
            <example>
            <list type="bullet">
            <item>
            <c>S=..q1....q2..q3{and so on}...qn...</c> is a match.
            </item>
            <item>
            <c>S=.....q1q2..q4{and there are missing substrings in the sequence}...qn...</c> is not match.
            </item>
            <item>
            <c>S=..q5..q3.q1{all the substrings in the sequence are present, but never in the corresponding order}...qn...</c> is not match.
            </item>
            </list>
            </example>
            The target field to query on is specified with <paramref name="query"/>, <seealso cref="!:TSLProject1.IndexIdentifier"/>.
            </summary>
            <param name="index_id">The identifier of the field that the query should be performed on.</param>
            <param name="query">The sequence of query strings.</param>
            <returns>
            A list of cell ids, of which the given query string sequence is matched on the target field, or
            an element it if it is a container of strings.
            </returns>
        </member>
        <member name="M:TSLProject1.Index.UpdateSubstringQueryIndex(TSLProject1.Index.IndexIdentifier)">
            <summary>
            Updates the index on the given field.
            </summary>
            <param name="index_id">The identifier of the field whose index should be rebuilt.</param>
        </member>
        <member name="T:TSLProject1.Index.IndexIdentifier">
            <summary>
            The base class of index identifiers. When performing index queries, an index identifier should be provided
            to the query interface. All the indexed fields defined in the TSL have a corresponding static index identifier
            instance, accessible through TSLProject1.Index.Target_Cell_Name.Target_Field_Name.
            </summary>
        </member>
        <member name="M:TSLProject1.Index.IndexIdentifier.op_Implicit(System.UInt32)~TSLProject1.Index.IndexIdentifier">
            <summary>
            For internal use only.
            </summary>
            <param name="value">An 32-bit unsigned integer that is assigned to the target index identifier. </param>
            <returns></returns>
        </member>
        <member name="T:TSLProject1.SubstringQueryExtension">
            <summary>
            Provides interfaces to be translated to index queires in Linq expressions.
            </summary>
        </member>
        <member name="T:TSLProject1.BufferAllocator">
            <summary>
            Reusable buffer.
            </summary>
        </member>
        <member name="T:TSLProject1.byteListAccessor">
            <summary>
            Represents a Trinity TSL type corresponding to List{byte}.
            </summary>
        </member>
        <member name="M:TSLProject1.byteListAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.ForEach(System.Action{System.Byte})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has one parameter indicates element in List</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.ForEach(System.Action{System.Byte,System.Int32})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterate through current list.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Add(System.Byte)">
            <summary>
            Adds an item to the end of the List
            </summary>
            <param name="element">The object to be added to the end of the List.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Insert(System.Int32,System.Byte)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="element">The object to insert.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Insert(System.Byte,System.Comparison{System.Byte})">
            <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
            <param name="element">The element to insert.</param>
            <param name="comparison">The Comparison delegate.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.AddRange(System.Collections.Generic.List{System.Byte})">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.AddRange(TSLProject1.byteListAccessor)">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Clear">
            <summary>
            Removes all elements from the List
            </summary>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Contains(System.Byte)">
            <summary>
            Determines whether an element is in the List
            </summary>
            <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Exists(System.Predicate{System.Byte})">
            <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.CopyTo(System.Byte[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.CopyTo(System.Byte[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Byte})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.op_Implicit(TSLProject1.byteListAccessor)~System.Collections.Generic.List{System.Byte}">
            <summary>
            Implicitly casts a byteList to List{byte}.
            </summary>
            <param name="accessor">A byteList instance.</param>
            <returns>A List{byte} instance.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.op_Implicit(System.Collections.Generic.List{System.Byte})~TSLProject1.byteListAccessor">
            <summary>
            Implicitly casts a List{byte} instance to byteList.
            </summary>
            <param name="value">The List{byte} instance.</param>
            <returns></returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.op_Implicit(System.Byte[])~TSLProject1.byteListAccessor">
            <summary>
            Implicitly convert a byte array to a byteList instance.
            </summary>
            <param name="value">The array of bytes.</param>
            <returns>A byteList instance.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.op_Equality(TSLProject1.byteListAccessor,TSLProject1.byteListAccessor)">
            <summary>
            Determines whether two specified byteList have the same value.
            </summary>
            <param name="a">The first byteList to compare, or null. </param>
            <param name="b">The second byteList to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.op_Inequality(TSLProject1.byteListAccessor,TSLProject1.byteListAccessor)">
            <summary>Determines whether two specified byteList have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first byteList to compare, or null. </param>
            <param name="b">The second byteList to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.byteListAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The byteList to compare to this instance.</param>
            <returns>true if obj is a byteList and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.byteListAccessor.GetHashCode">
            <summary>
            Returns the hash code for this byteList.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:TSLProject1.byteListAccessor.Count">
            <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
        </member>
        <member name="P:TSLProject1.byteListAccessor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">Given index</param>
            <returns>Corresponding element at the specified index</returns>
        </member>
        <member name="T:TSLProject1.DateTimeAccessor">
            <summary>
            Represents a Trinity data type that corresponds .Net DateTime.
            </summary>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.TryParse(System.String,TSLProject1.DateTimeAccessor@)">
             <summary>
                 Converts the specified string representation of a date and time to its <see cref="!:Trinity.TSL.Lib.DateTimeAccessor"/>
                 equivalent and returns a value that indicates whether the conversion succeeded.
             </summary>
            
             <param name="input">
                 A string containing a date and time to convert.
             </param>
            
             <param name="value">
                 When this method returns, contains the <see cref="!:Trinity.TSL.Lib.DateTimeAccessor"/> value equivalent to
                 the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue"/>
                 if the conversion failed. The conversion fails if the s parameter is null,
                 is an empty string (""), or does not contain a valid string representation
                 of a date and time. This parameter is passed uninitialized.
             </param>
            
             <returns>
                 true if the s parameter was converted successfully; otherwise, false.
             </returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.TryParse(System.String,System.DateTime@)">
             <summary>
                 Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/>
                 equivalent and returns a value that indicates whether the conversion succeeded.
             </summary>
            
             <param name="input">
                 A string containing a date and time to convert.
             </param>
            
             <param name="value">
                 When this method returns, contains the <see cref="T:System.DateTime"/> value equivalent to
                 the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue"/>
                 if the conversion failed. The conversion fails if the s parameter is null,
                 is an empty string (""), or does not contain a valid string representation
                 of a date and time. This parameter is passed uninitialized.
             </param>
            
             <returns>
                 true if the s parameter was converted successfully; otherwise, false.
             </returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.ToBinary">
            <summary>
            Serializes the current DateTime object to a 64-bit binary value that subsequently can be used to recreate the DateTime object.
            </summary>
            <returns>A 64-bit signed integer that encodes the .Net DateTime. </returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.ToByteArray">
            <summary>
            Returns an eight byte array that contains the value of this instance.
            </summary>
            <returns>An eight byte array.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.ToString">
            <summary>
            Converts the value of the current DateTime object to its equivalent string representation.
            </summary>
            <returns>A string representation of the value of the current DateTime object.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.ToDateTime">
            <summary>
            Converts current DateTimeAccessor instance to DateTime.
            </summary>
            <returns>A DateTime value corresponding to current DateTimeAccessor.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.op_Implicit(TSLProject1.DateTimeAccessor)~System.DateTime">
            <summary>
            Converts current DateTimeAccessor instance to DateTime.
            </summary>
            <param name="value">A DateTimeAccessor instance.</param>
            <returns>A DateTime value corresponding to current DateTimeAccessor.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.op_Implicit(System.DateTime)~TSLProject1.DateTimeAccessor">
            <summary>
            Converts a DateTime instance to DateTimeAccessor.
            </summary>
            <param name="value">A DateTime instance.</param>
            <returns>A DateTimeAccessor instance corresponding to the specified DateTime.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.op_Equality(TSLProject1.DateTimeAccessor,TSLProject1.DateTimeAccessor)">
            <summary>
            Returns a value indicating whether two given DateTimeAccessor instances have the same value.
            </summary>
            <param name="a">The first DateTimeAccessor instance.</param>
            <param name="b">The second DateTimeAccessor instance.</param>
            <returns>true if two given DateTimeAccessor instances have the same value; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.op_Inequality(TSLProject1.DateTimeAccessor,TSLProject1.DateTimeAccessor)">
            <summary>
            Returns a value indicating whether two given DateTimeAccessor instances have the same value.
            </summary>
            <param name="a">The first DateTimeAccessor instance.</param>
            <param name="b">The second DateTimeAccessor instance.</param>
            <returns>true if two given DateTimeAccessor instances do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="value">An object to compare to this instance.</param>
            <returns>true if value is an instance of DateTimeAccessor and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.DateTimeAccessor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:TSLProject1.doubleListAccessor">
            <summary>
            Represents a TSL double list corresponding to List{double}.
            </summary>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.ToArray">
            <summary>
            Copies the elements to a new double array.
            </summary>
            <returns>An array of double.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.ForEach(System.Action{System.Double})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has one parameter indicates element in List</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.ForEach(System.Action{System.Double,System.Int32})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterate through current list.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Add(System.Double)">
            <summary>
            Adds an item to the end of the List
            </summary>
            <param name="element">The object to be added to the end of the List.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Insert(System.Int32,System.Double)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="element">The object to insert.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Insert(System.Double,System.Comparison{System.Double})">
            <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
            <param name="element">The element to insert.</param>
            <param name="comparison">The Comparison delegate.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.AddRange(System.Collections.Generic.List{System.Double})">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.AddRange(System.Double[])">
            <summary>
            Adds the array of double elements to the end of the List.
            </summary>
            <param name="collection">The array of double elements.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.AddRange(System.Double[],System.Int32,System.Int32)">
            <summary>
            Adds the array of double elements to the end of the List starting from the specified index.
            </summary>
            <param name="collection">The array of double elements.</param>
            <param name="startIndex">The start position of the double array from which we copy the elements.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.AddRange(TSLProject1.doubleListAccessor)">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Clear">
            <summary>
            Removes all elements from the List
            </summary>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Contains(System.Double)">
            <summary>
            Determines whether an element is in the List
            </summary>
            <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Exists(System.Predicate{System.Double})">
            <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.CopyTo(System.Double[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Double})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.op_Implicit(TSLProject1.doubleListAccessor)~System.Collections.Generic.List{System.Double}">
            <summary>
            Implicitly converts a doubleList instance to a List{double} instance.
            </summary>
            <param name="accessor">The doubleList instance.</param>
            <returns>The List{double} instance.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.op_Implicit(System.Collections.Generic.List{System.Double})~TSLProject1.doubleListAccessor">
            <summary>
            Implicitly converts a List{double} instance to a doubleList instance.
            </summary>
            <param name="value">The List{double} instance.</param>
            <returns>The doubleList instance.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.op_Equality(TSLProject1.doubleListAccessor,TSLProject1.doubleListAccessor)">
            <summary>
            Determines whether two specified doubleList have the same value.
            </summary>
            <param name="a">The first doubleList to compare, or null. </param>
            <param name="b">The second doubleList to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.op_Inequality(TSLProject1.doubleListAccessor,TSLProject1.doubleListAccessor)">
            <summary>Determines whether two specified doubleList have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first doubleList to compare, or null. </param>
            <param name="b">The second doubleList to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The doubleList to compare to this instance.</param>
            <returns>true if <paramref name="obj" /> is a doubleList and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.doubleListAccessor.GetHashCode">
            <summary>
            Return the hash code for this doubleList.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:TSLProject1.doubleListAccessor.Count">
            <summary>
            Gets the number of double elements actually contained in the List. 
            </summary>
        </member>
        <member name="P:TSLProject1.doubleListAccessor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">Given index</param>
            <returns>Corresponding element at the specified index</returns>
        </member>
        <member name="T:TSLProject1.EnumAccessor">
            <summary>
            Represents a 256-bit enum type.
            </summary>
        </member>
        <member name="M:TSLProject1.EnumAccessor.ToByte">
            <summary>
            Gets the byte value.
            </summary>
            <returns>A byte.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.ToByteArray">
            <summary>
            Gets the underlying blob.
            </summary>
            <returns>A byte array with size one.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.op_Implicit(TSLProject1.EnumAccessor)~System.Byte">
            <summary>
            Converts a EnumAccessor accessor to a byte value.
            </summary>
            <param name="accessor">A EnumAccessor accessor.</param>
            <returns>A byte.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.op_Implicit(System.Byte)~TSLProject1.EnumAccessor">
            <summary>
            Converts a byte value to a EnumAccessor value.
            </summary>
            <param name="value">A byte value.</param>
            <returns>A EnumAccessor value.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.op_Equality(TSLProject1.EnumAccessor,TSLProject1.EnumAccessor)">
            <summary>
            Returns a value indicating whether two given EnumAccessor instances have the same value.
            </summary>
            <param name="a">A EnumAccessor instance.</param>
            <param name="b">Another EnumAccessor instance.</param>
            <returns>true if the two given EnumAccessor instances have the same value; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.op_Inequality(TSLProject1.EnumAccessor,TSLProject1.EnumAccessor)">
            <summary>
            Returns a value indicating whether two given EnumAccessor instances have the same value.
            </summary>
            <param name="a">A EnumAccessor instance.</param>
            <param name="b">Another EnumAccessor instance.</param>
            <returns>true if the two given EnumAccessor instances do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance or null.</param>       
            <returns>true if obj is an instance of EnumAccessor and equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.EnumAccessor.GetHashCode">
            <summary>
            Returns the hash code of the underlying value.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:TSLProject1.GuidAccessor">
            <summary>
            Represents a Trinity type corresponding .Net Guid type.
            </summary>
        </member>
        <member name="M:TSLProject1.GuidAccessor.TryParse(System.String,TSLProject1.GuidAccessor@)">
            
             <summary>
                 Converts the string representation of a GUID to the equivalent <see cref="T:TSLProject1.GuidAccessor"/>
                 structure.
             </summary>
             <param name="input">
                 The GUID to convert.
             </param>
             <param name="value">
                 The structure that will contain the parsed value.
             </param>
            
             <returns>
                 true if the parse operation was successful; otherwise, false.
             </returns>
            
        </member>
        <member name="M:TSLProject1.GuidAccessor.TryParse(System.String,System.Guid@)">
            
             <summary>
                 Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid"/>
                 structure.
             </summary>
             <param name="input">
                 The GUID to convert.
             </param>
             <param name="value">
                 The structure that will contain the parsed value.
             </param>
            
             <returns>
                 true if the parse operation was successful; otherwise, false.
             </returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.ToByteArray">
            <summary>
            Returns a 16 byte array that contains the value of this instance.
            </summary>
            <returns>A 16 byte array.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format. 
            </summary>
            <returns>Returns a string representation of the value of this instance in registry format.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.ToGuid">
            <summary>
            Converts the current instance to a Guid value.
            </summary>
            <returns>A Guid value.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.ToString(System.String)">
            <summary>
            Returns a string representation of the value of this Guid instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this Guid. The format parameter can be "N", "D", "B", "P", or "X". If format is null or an empty string (""), "D" is used. </param>
            <returns>The value of this Guid, represented as a series of lowercase hexadecimal digits in the specified format. </returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.op_Implicit(TSLProject1.GuidAccessor)~System.Guid">
            <summary>
            Implicitly converts a GuidAccessor instance to a Guid instance.
            </summary>
            <param name="accessor">The GuidAccessor instance.</param>
            <returns>A Guid instance.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.op_Implicit(System.Guid)~TSLProject1.GuidAccessor">
            <summary>
            Implicitly converts a Guid instance to a GuidAccessor instance.
            </summary>
            <param name="value">The Guid instance.</param>
            <returns>A GuidAccessor instance.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.op_Equality(TSLProject1.GuidAccessor,TSLProject1.GuidAccessor)">
            <summary>
            Determines whether two specified GuidAccessor have the same value.
            </summary>
            <param name="a">The first GuidAccessor to compare, or null. </param>
            <param name="b">The second GuidAccessor to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.op_Inequality(TSLProject1.GuidAccessor,TSLProject1.GuidAccessor)">
            <summary>Determines whether two specified GuidAccessor have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first GuidAccessor to compare, or null. </param>
            <param name="b">The second GuidAccessor to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.GuidAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The GuidAccessor to compare to this instance.</param>
            <returns>true if <paramref name="obj" /> is a GuidAccessor and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.GuidAccessor.GetHashCode">
            <summary>
            Return the hash code for this doubleList.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:TSLProject1.intListAccessor">
            <summary>
            Represents a TSL double list corresponding to List{double}.
            </summary>
        </member>
        <member name="M:TSLProject1.intListAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.ForEach(System.Action{System.Int32})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has one parameter indicates element in List</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.ForEach(System.Action{System.Int32,System.Int32})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterate through current list.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.Add(System.Int32)">
            <summary>
            Adds an item to the end of the List
            </summary>
            <param name="element">The object to be added to the end of the List.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="element">The object to insert.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.Insert(System.Int32,System.Comparison{System.Int32})">
            <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
            <param name="element">The element to insert.</param>
            <param name="comparison">The Comparison delegate.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.AddRange(System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.AddRange(TSLProject1.intListAccessor)">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.Clear">
            <summary>
            Removes all elements from the List
            </summary>
        </member>
        <member name="M:TSLProject1.intListAccessor.Contains(System.Int32)">
            <summary>
            Determines whether an element is in the List
            </summary>
            <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.Exists(System.Predicate{System.Int32})">
            <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.CopyTo(System.Int32[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.CopyTo(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:TSLProject1.intListAccessor.op_Implicit(TSLProject1.intListAccessor)~System.Collections.Generic.List{System.Int32}">
            <summary>
            Implicitly converts an intList instance to a List{int} instance.
            </summary>
            <param name="accessor">The intList instance.</param>
            <returns>A List{int} instance.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.op_Implicit(System.Collections.Generic.List{System.Int32})~TSLProject1.intListAccessor">
            <summary>
            Implicitly converts a List{int} instance to an intList instance.
            </summary>
            <param name="value">The List{int} instance.</param>
            <returns>An intList instance.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.op_Equality(TSLProject1.intListAccessor,TSLProject1.intListAccessor)">
            <summary>
            Determines whether two specified intList have the same value.
            </summary>
            <param name="a">The first intList to compare, or null. </param>
            <param name="b">The second intList to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.op_Inequality(TSLProject1.intListAccessor,TSLProject1.intListAccessor)">
            <summary>Determines whether two specified intList have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first intList to compare, or null. </param>
            <param name="b">The second intList to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.intListAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The intList to compare to this instance.</param>
            <returns>true if <paramref name="obj" /> is a doubleList and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.intListAccessor.GetHashCode">
            <summary>
            Return the hash code for this intList.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:TSLProject1.intListAccessor.Count">
            <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
        </member>
        <member name="P:TSLProject1.intListAccessor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">Given index</param>
            <returns>Corresponding element at the specified index</returns>
        </member>
        <member name="T:TSLProject1.longListAccessor">
            <summary>
            Represents a TSL long list corresponding List{long}.
            </summary>
        </member>
        <member name="M:TSLProject1.longListAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.ForEach(System.Action{System.Int64})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has one parameter indicates element in List</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.ForEach(System.Action{System.Int64,System.Int32})">
            <summary>
            Performs the specified action on each elements
            </summary>
            <param name="action">A lambda expression which has two parameters. First indicates element in the List and second the index of this element.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterate through current list.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.Add(System.Int64)">
            <summary>
            Adds an item to the end of the List
            </summary>
            <param name="element">The object to be added to the end of the List.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.Insert(System.Int32,System.Int64)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="element">The object to insert.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.Insert(System.Int64,System.Comparison{System.Int64})">
            <summary>
            Inserts an element into the sorted List using the specified Comparison delegate.
            </summary>
            <param name="element">The element to insert.</param>
            <param name="comparison">The Comparison delegate.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.AddRange(System.Collections.Generic.List{System.Int64})">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="list">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.AddRange(TSLProject1.longListAccessor)">
            <summary>
            Adds the elements of the specified collection to the end of the List
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. The collection itself cannot be null.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.Clear">
            <summary>
            Removes all elements from the List
            </summary>
        </member>
        <member name="M:TSLProject1.longListAccessor.Contains(System.Int64)">
            <summary>
            Determines whether an element is in the List
            </summary>
            <param name="item">The object to locate in the List.The value can be null for non-atom types</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.Exists(System.Predicate{System.Int64})">
            <summary>
            Determines whether the List contains elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.CopyTo(System.Int64[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the beginning of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.CopyTo(System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, starting at the specified index of the ptr1 array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>;
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.InsertRange(System.Int32,System.Collections.Generic.List{System.Int64})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. The collection itself cannot be null, but it can contain elements that are null, if type T is a reference type.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:TSLProject1.longListAccessor.op_Implicit(TSLProject1.longListAccessor)~System.Collections.Generic.List{System.Int64}">
            <summary>
            Implicitly converts a longList instance to a List{long} instance.
            </summary>
            <param name="accessor">The longList instance.</param>
            <returns>A List{long} instance.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.op_Implicit(System.Collections.Generic.List{System.Int64})~TSLProject1.longListAccessor">
            <summary>
            Implicitly converts a List{long} instance to a longList instance.
            </summary>
            <param name="value">The List{long} instance.</param>
            <returns>A longList instance.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.op_Equality(TSLProject1.longListAccessor,TSLProject1.longListAccessor)">
            <summary>
            Determines whether two specified longList have the same value.
            </summary>
            <param name="a">The first longList to compare, or null. </param>
            <param name="b">The second longList to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.op_Inequality(TSLProject1.longListAccessor,TSLProject1.longListAccessor)">
            <summary>Determines whether two specified longList have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first longList to compare, or null. </param>
            <param name="b">The second longList to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.longListAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The longList to compare to this instance.</param>
            <returns>true if <paramref name="obj" /> is a longList and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.longListAccessor.GetHashCode">
            <summary>
            Return the hash code for this longList.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:TSLProject1.longListAccessor.Count">
            <summary>
            Gets the number of elements actually contained in the List. 
            </summary>
        </member>
        <member name="P:TSLProject1.longListAccessor.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index">Given index</param>
            <returns>Corresponding element at the specified index</returns>
        </member>
        <member name="T:TSLProject1.StringAccessor">
            <summary>
            Represents a TSL string corresponding to a string instance.
            </summary>
        </member>
        <member name="M:TSLProject1.StringAccessor.ToString">
            <summary>
            Returns this instance of String
            </summary>
            <returns>The current string.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.Contains(System.String)">
            <summary>
            Returns a value indicating whether the given substring occurs within the string.
            </summary>
            <param name="substring">The string to seek.</param>
            <returns>true if the value parameter occurs within this string, or if value is 
                     the empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.ForEach(System.Action{System.Char})">
            <summary>
            Performs the specified action on each char
            </summary>
            <param name="action">A lambda expression which has one parameter indicates char in string</param>
        </member>
        <member name="M:TSLProject1.StringAccessor.ForEach(System.Action{System.Char,System.Int32})">
            <summary>
            Performs the specified action on each char
            </summary>
            <param name="action">A lambda expression which has two parameters. First indicates char in the string and second the index of this char.</param>
        </member>
        <member name="M:TSLProject1.StringAccessor.GetEnumerator">
            <summary>
            Returns an enumerator that iterate through current string.
            </summary>
            <returns>
            An IEnumerator object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Implicit(TSLProject1.StringAccessor)~System.String">
            <summary>
            Implicitly converts a StringAccessor instance to a string instance.
            </summary>
            <param name="accessor">The StringAccessor instance.</param>
            <returns>A string instance.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Implicit(System.String)~TSLProject1.StringAccessor">
            <summary>
            Implicitly converts a string instance to a BlogString instance.
            </summary>
            <param name="value">The string instance.</param>
            <returns>The StringAccessor instance.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Equality(TSLProject1.StringAccessor,TSLProject1.StringAccessor)">
            <summary>
            Determines whether two specified StringAccessor have the same value.
            </summary>
            <param name="a">The first StringAccessor to compare, or null. </param>
            <param name="b">The second StringAccessor to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Equality(TSLProject1.StringAccessor,System.String)">
            <summary>
            Determines whether the specified StringAccessor and string have the same value.
            </summary>
            <param name="a">The StringAccessor to compare, or null. </param>
            <param name="b">The string to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Inequality(TSLProject1.StringAccessor,System.String)">
            <summary>Determines whether the specified StringAccessor and string have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The StringAccessor to compare, or null. </param>
            <param name="b">The String to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.StringAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The StringAccessor to compare to this instance.</param>
            <returns>true if obj is a StringAccessor and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.GetHashCode">
            <summary>Returns the hash code for this StringAccessor.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:TSLProject1.StringAccessor.op_Inequality(TSLProject1.StringAccessor,TSLProject1.StringAccessor)">
            <summary>Determines whether the two specified StringAccessor have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first StringAccessor to compare, or null. </param>
            <param name="b">The second StringAccessor to compare, or null. </param>
        </member>
        <member name="P:TSLProject1.StringAccessor.Length">
            <summary>
            Gets the number of characters in the current String object.
            </summary>
        </member>
        <member name="P:TSLProject1.StringAccessor.Item(System.Int32)">
            <summary>
            Gets the Char object at a specified position in the current String object.
            </summary>
            <param name="index">A position in the current string. </param>
            <returns>The object at position index.</returns>
        </member>
        <member name="T:TSLProject1.U8StringAccessor">
            <summary>
            Represents a TSL string corresponding to a string instance.
            </summary>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.ToString">
            <summary>
            Returns this instance of String
            </summary>
            <returns>The current string.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.ToByteArray">
            <summary>
            Copies the elements to a new byte array
            </summary>
            <returns>Elements compactly arranged in a byte array.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.Contains(System.String)">
            <summary>
            Returns a value indicating whether the given substring occurs within the string.
            </summary>
            <param name="substring">The string to seek.</param>
            <returns>true if the value parameter occurs within this string, or if value is 
                     the empty string (""); otherwise, false.
            </returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Implicit(TSLProject1.U8StringAccessor)~System.String">
            <summary>
            Implicitly converts a StringAccessor instance to a string instance.
            </summary>
            <param name="accessor">The StringAccessor instance.</param>
            <returns>A string instance.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Implicit(System.String)~TSLProject1.U8StringAccessor">
            <summary>
            Implicitly converts a string instance to a U8String instance.
            </summary>
            <param name="value">The string instance.</param>
            <returns>The StringAccessor instance.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Equality(TSLProject1.U8StringAccessor,TSLProject1.U8StringAccessor)">
            <summary>
            Determines whether two specified StringAccessor have the same value.
            </summary>
            <param name="a">The first StringAccessor to compare, or null. </param>
            <param name="b">The second StringAccessor to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Equality(TSLProject1.U8StringAccessor,System.String)">
            <summary>
            Determines whether the specified StringAccessor and string have the same value.
            </summary>
            <param name="a">The StringAccessor to compare, or null. </param>
            <param name="b">The string to compare, or null. </param>
            <returns>true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Inequality(TSLProject1.U8StringAccessor,System.String)">
            <summary>Determines whether the specified StringAccessor and string have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The StringAccessor to compare, or null. </param>
            <param name="b">The String to compare, or null. </param>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object have the same value.
            </summary>
            <param name="obj">The StringAccessor to compare to this instance.</param>
            <returns>true if obj is a StringAccessor and its value is the same as this instance; otherwise, false.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.GetHashCode">
            <summary>Returns the hash code for this StringAccessor.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:TSLProject1.U8StringAccessor.op_Inequality(TSLProject1.U8StringAccessor,TSLProject1.U8StringAccessor)">
            <summary>Determines whether the two specified StringAccessor have different values.</summary>
            <returns>true if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, false.</returns>
            <param name="a">The first StringAccessor to compare, or null. </param>
            <param name="b">The second StringAccessor to compare, or null. </param>
        </member>
        <member name="P:TSLProject1.U8StringAccessor.Length">
            <summary>
            Gets the number of bytes in the current U8String object.
            </summary>
        </member>
        <member name="P:TSLProject1.Linq.RewrittableWhereCaluseVisitor`1.RewrittableWhereClauses">
            <summary>
            Visits the expression and get a list of rewrittable where clauses.
            We say a clause is rewrittable, if there's no select clause before
            it in the call chain.
            !It is then the inner most where clauses that get packed into this list.
            </summary>
        </member>
        <member name="F:TSLProject1.Linq.IndexQueryTreeNode.wildcard_query">
            <summary>
            See issue #155
            http://graph006:00/redmine/issues/155
            </summary>
        </member>
        <member name="T:TSLProject1.Linq.PLINQWrapper`1">
            <summary>
            Provides a wrapper that redirects CellAccessorSelector.AsParallel().
            </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Aggregate(System.Func{`0,`0,`0})">
             <summary>
                 Applies an accumulator function over a sequence.
             </summary>
             
             <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
             
             <returns>
                 The final accumulator value.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or func is null.
             </exception>
            
             <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
             
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Aggregate``1(``0,System.Func{``0,`0,``0})">
            
             <summary>
                 Applies an accumulator function over a sequence. The specified seed value
                 is used as the initial accumulator value.
             </summary>
             
             <param name="seed">
                 The initial accumulator value.
             </param>
             
             <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
            
             <typeparam name="TAccumulate">
                 The type of the accumulator value.
             </typeparam>
             <returns>
                 The final accumulator value.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or func is null.
             </exception>
             
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Aggregate``2(``0,System.Func{``0,`0,``0},System.Func{``0,``1})">
            
             <summary>
                 Applies an accumulator function over a sequence. The specified seed value
                 is used as the initial accumulator value, and the specified function is used
                 to select the result value.
             </summary>
             
             <param name="seed">
                 The initial accumulator value.
             </param>
             
             <param name="func">
                 An accumulator function to be invoked on each element.
             </param>
            
             <param name="resultSelector">
                 A function to transform the final accumulator value into the result value.
             </param>
            
             <typeparam name="TAccumulate">
                 The type of the accumulator value.
             </typeparam>
             
             <typeparam name="TResult">
                 The type of the resulting value.
             </typeparam>
             
             <returns>
                 The transformed final accumulator value.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or func or resultSelector is null.
             </exception>
             
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.All(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether all elements of a sequence satisfy a condition.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                true if every element of the source sequence passes the test in the specified
                predicate, or if the sequence is empty; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
            
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Any">
            <summary>
                Determines whether a sequence contains any elements.
            </summary>
            <returns>
                true if the source sequence contains any elements; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Any(System.Func{`0,System.Boolean})">
            <summary>
                Determines whether any element of a sequence satisfies a condition.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                true if any elements in the source sequence pass the test in the specified
                predicate; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
            
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.AsEnumerable">
            <summary>
                Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>
                The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Decimal}})">
            <summary>
                Computes the average of a sequence of nullable System.Decimal values that
                are obtained by invoking a transform function on each element of the input
                sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
                 
            <returns>
                The average of the sequence of values, or null if the source sequence is
                empty or contains only values that are null.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
                The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Decimal})">
            
             <summary>
                 Computes the average of a sequence of System.Decimal values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
            
             <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Double}})">
            
             <summary>
                 Computes the average of a sequence of nullable System.Double values that
                 are obtained by invoking a transform function on each element of the input
                 sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Double})">
            
            <summary>
                Computes the average of a sequence of System.Double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The average of the sequence of values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Single}})">
            
             <summary>
                 Computes the average of a sequence of nullable System.Single values that
                 are obtained by invoking a transform function on each element of the input
                 sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Single})">
            
            <summary>
                Computes the average of a sequence of System.Single values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The average of the sequence of values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Int32}})">
            
             <summary>
                 Computes the average of a sequence of nullable System.Int32 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Int32})">
             <summary>
                 Computes the average of a sequence of System.Int32 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
            
             <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Nullable{System.Int64}})">
            
             <summary>
                 Computes the average of a sequence of nullable System.Int64 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values, or null if the source sequence is
                 empty or contains only values that are null.
             </returns>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Average(System.Func{`0,System.Int64})">
             <summary>
                 Computes the average of a sequence of System.Int64 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The average of the sequence of values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
            
             <exception cref="T:System.OverflowException">
                 The sum of the elements in the sequence is larger than System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Cast``1">
            
             <summary>
                 Casts the elements of an <see cref="T:System.Linq.ParallelQuery"/> to the specified
                 type.
             </summary>
             <returns>
                 A System.Linq.ParallelQuery{T} that contains each element of
                 the source sequence cast to the specified type.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
             
             <exception cref="T:System.InvalidCastException">
                 An element in the sequence cannot be cast to type TResult.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Contains(`0)">
            
             <summary>
                 Determines whether a sequence contains a specified element by using the default
                 equality comparer.
             </summary>
             
             <param name="value">
                 The value to locate in the sequence.
             </param>
             
             <returns>
                 true if the source sequence contains an element that has the specified value;
                 otherwise, false.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
             
             <summary>
                 Determines whether a sequence contains a specified element by using a specified
                 System.Collections.Generic.IEqualityComparer{T}.
             </summary>
             
             <param name="value">
                 The value to locate in the sequence.
             </param>
             
             <param name="comparer">
                 An equality comparer to compare values.
             </param>
            
             <returns>
                 true if the source sequence contains an element that has the specified value;
                 otherwise, false.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Count">
            
            <summary>
                Returns the number of elements in a sequence.
            </summary>
            <returns>
                The number of elements in the input sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
                The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Count(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns a number that represents how many elements in the specified sequence
                 satisfy a condition.
             </summary>
             
             <param name="predicate">
                 A function to test each element for a condition.
             </param>
             
             <returns>
                 A number that represents how many elements in the sequence satisfy the condition
                 in the predicate function.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The number of elements in source is larger than System.Int32.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.First">
            
             <summary>
                 Returns the first element of a sequence.
             </summary>
             <returns>
                 The first element in the specified sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 The source sequence is empty.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.First(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns the first element in a sequence that satisfies a specified condition.
             </summary>
             
             <param name="predicate">
                 A function to test each element for a condition.
             </param>
             
             <returns>
                 The first element in the sequence that passes the test in the specified predicate
                 function.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-The source sequence is
             </exception>
                 empty.
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.FirstOrDefault">
            
             <summary>
                 Returns the first element of a sequence, or a default value if the sequence
                 contains no elements.
             </summary>
             <returns>
                 default(TSource) if source is empty; otherwise, the first element in source.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            
            <summary>
                Returns the first element of the sequence that satisfies a condition or a
                default value if no such element is found.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                default(TSource) if source is empty or if no element passes the test specified
                by predicate; otherwise, the first element in source that passes the test
                specified by predicate.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Last">
            
            <summary>
                Returns the last element of a sequence.
            </summary>
            <returns>
                The value at the last position in the source sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                The source sequence is empty.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Last(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns the last element of a sequence that satisfies a specified condition.
             </summary>
             
             <param name="predicate">
                 A function to test each element for a condition.
             </param>
             
             <returns>
                 The last element in the sequence that passes the test in the specified predicate
                 function.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-The source sequence is
             </exception>
                 empty.
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.LastOrDefault">
            
             <summary>
                 Returns the last element of a sequence, or a default value if the sequence
                 contains no elements.
             </summary>
             <returns>
                 default(TSource) if the source sequence is empty; otherwise, the last element
                 in the Trinity.Index.LINQ.ParallelQuery{T}.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.LastOrDefault(System.Func{`0,System.Boolean})">
            
            <summary>
                Returns the last element of a sequence that satisfies a condition or a default
                value if no such element is found.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                default(TSource) if the sequence is empty or if no elements pass the test
                in the predicate function; otherwise, the last element that passes the test
                in the predicate function.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.LongCount">
            
            <summary>
                Returns an System.Int64 that represents the total number of elements in a
                sequence.
            </summary>
            <returns>
                The number of elements in the source sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
                The number of elements exceeds System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.LongCount(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns an System.Int64 that represents how many elements in a sequence satisfy
                 a condition.
             </summary>
             
             <param name="predicate">
                 A function to test each element for a condition.
             </param>
             
             <returns>
                 A number that represents how many elements in the sequence satisfy the condition
                 in the predicate function.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The number of matching elements exceeds System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Decimal}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Decimal value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Decimal} in C# or Nullable(Of Decimal) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Decimal})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Decimal value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The maximum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Double}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Double value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Double} in C# or Nullable(Of Double) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Double})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Double value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The maximum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Single}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Single value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Single} in C# or Nullable(Of Single) in Visual
                 Basic that corresponds to the maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Single})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Single value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The maximum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Int32}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Int32 value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Int32} in C# or Nullable(Of Int32) in Visual Basic
                 that corresponds to the maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Int32})">
             
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum System.Int32 value.
             </summary>
             
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
            
             <returns>
                 The maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 source contains no elements.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Nullable{System.Int64}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 maximum nullable System.Int64 value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Int64} in C# or Nullable(Of Int64) in Visual Basic
                 that corresponds to the maximum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Max(System.Func{`0,System.Int64})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                maximum System.Int64 value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The maximum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Decimal}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Decimal value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Decimal} in C# or Nullable(Of Decimal) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Decimal})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Decimal value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The minimum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Double}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Double value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Double} in C# or Nullable(Of Double) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Double})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Double value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The minimum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Single}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Single value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Single} in C# or Nullable(Of Single) in Visual
                 Basic that corresponds to the minimum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Single})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Single value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The minimum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Int32}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Int32 value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Int32} in C# or Nullable(Of Int32) in Visual Basic
                 that corresponds to the minimum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Int32})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Int32 value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The minimum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Nullable{System.Int64}})">
            
             <summary>
                 Invokes a transform function on each element of a sequence and returns the
                 minimum nullable System.Int64 value.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The value of type Nullable{Int64} in C# or Nullable(Of Int64) in Visual Basic
                 that corresponds to the minimum value in the sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Min(System.Func{`0,System.Int64})">
            
            <summary>
                Invokes a transform function on each element of a sequence and returns the
                minimum System.Int64 value.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The minimum value in the sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
                source contains no elements.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Select``1(System.Func{`0,System.Int32,``0})">
            
             <summary>
                 Projects each element of a sequence into a new form by incorporating the
                 element's index.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <typeparam name="TResult">
                 The type of the value returned by selector.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the transform function on each element of source.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Select``1(System.Func{`0,``0})">
             
             <summary>
                 Projects each element of a sequence into a new form.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <typeparam name="TResult">
                 The type of the value returned by selector.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the transform function on each element of source.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}})">
             
             <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T}
                 and flattens the resulting sequences into one sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <typeparam name="TResult">
                 The type of the elements of the sequence returned by selector.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function on each element of the input
                 sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SelectMany``1(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}})">
             
             <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 and flattens the resulting sequences into one sequence. The index of each
                 source element is used in the projected form of that element.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <typeparam name="TResult">
                 The type of the elements of the sequence returned by selector.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function on each element of an input
                 sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
             
             <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 flattens the resulting sequences into one sequence, and invokes a result
                 selector function on each element therein.
             </summary>
             
             
             <param name="collectionSelector">
                 A transform function to apply to each element of the input sequence.
             </param>
            
             <param name="resultSelector">
                 A transform function to apply to each element of the intermediate sequence.
             </param>
            
             <typeparam name="TCollection">
                 The type of the intermediate elements collected by <paramref name="collectionSelector"/>.
             </typeparam>
            
             <typeparam name="TResult">
                 The type of the elements of the resulting sequence.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function collectionSelector on each
                 element of source and then mapping each of those sequence elements and their
                 corresponding source element to a result element.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or collectionSelector or resultSelector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SelectMany``2(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1})">
             
             <summary>
                 Projects each element of a sequence to an Trinity.Index.LINQ.ParallelQuery{T},
                 flattens the resulting sequences into one sequence, and invokes a result
                 selector function on each element therein. The index of each source element
                 is used in the intermediate projected form of that element.
             </summary>
             
             <param name="collectionSelector">
                 A transform function to apply to each source element; the second parameter
             </param>
                 of the function represents the index of the source element.
             
             <param name="resultSelector">
                 A transform function to apply to each element of the intermediate sequence.
             </param>
            
             <typeparam name="TCollection">
                 The type of the intermediate elements collected by collectionSelector.
             </typeparam>
            
             <typeparam name="TResult">
                 The type of the elements of the resulting sequence.
             </typeparam>
            
             <returns>
                 A System.Linq.ParallelQuery{T} whose elements are the result
                 of invoking the one-to-many transform function collectionSelector on each
                 element of source and then mapping each of those sequence elements and their
                 corresponding source element to a result element.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or collectionSelector or resultSelector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            
            <summary>
                Determines whether two sequences are equal by comparing their elements by
                using a specified System.Collections.Generic.IEqualityComparer{T}.
            </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SequenceEqual(System.Collections.Generic.IEnumerable{`0})">
            
             <summary>
                 Determines whether two sequences are equal by comparing the elements by using
                 the default equality comparer for their type.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Single">
            
             <summary>
                 Returns the only element of a sequence, and throws an exception if there
                 is not exactly one element in the sequence.
             </summary>
             <returns>
                 The single element of the input sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 The input sequence contains more than one element.-or-The input sequence
             </exception>
                 is empty.
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Single(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns the only element of a sequence that satisfies a specified condition,
                 and throws an exception if more than one such element exists.
             </summary>
             
             
             <param name="predicate">
                 A function to test an element for a condition.
             </param>
            
             <returns>
                 The single element of the input sequence that satisfies a condition.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 No element satisfies the condition in predicate.-or-More than one element
             </exception>
                 satisfies the condition in predicate.-or-The source sequence is empty.
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SingleOrDefault">
            
             <summary>
                 Returns the only element of a sequence, or a default value if the sequence
                 is empty; this method throws an exception if there is more than one element
                 in the sequence.
             </summary>
             <returns>
                 The single element of the input sequence, or default(TSource) if the sequence
                 contains no elements.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
             
             <exception cref="T:System.InvalidOperationException">
                 The input sequence contains more than one element.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SingleOrDefault(System.Func{`0,System.Boolean})">
            
             <summary>
                 Returns the only element of a sequence that satisfies a specified condition
                 or a default value if no such element exists; this method throws an exception
                 if more than one element satisfies the condition.
             </summary>
             
             
             <param name="predicate">
                 A function to test an element for a condition.
             </param>
            
             <returns>
                 The single element of the input sequence that satisfies the condition, or
                 default(TSource) if no such element is found.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Skip(System.Int32)">
             
             <summary>
                 Bypasses a specified number of elements in a sequence and then returns the
                 remaining elements.
             </summary>
             
             
             <param name="count">
                 The number of elements to skip before returning the remaining elements.
             </param>
            
             <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements that
                 occur after the specified index in the input sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SkipWhile(System.Func{`0,System.Boolean})">
             
             <summary>
                 Bypasses elements in a sequence as long as a specified condition is true
                 and then returns the remaining elements.
             </summary>
             
             
             <param name="predicate">
                 A function to test each element for a condition.
             </param>
            
            
             <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                 the input sequence starting at the first element in the linear series that
                 does not pass the test specified by predicate.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})">
             
             <summary>
                 Bypasses elements in a sequence as long as a specified condition is true
                 and then returns the remaining elements. The element's index is used in the
                 logic of the predicate function.
             </summary>
             
             
             <param name="predicate">
                 A function to test each source element for a condition; the second parameter
             </param>
                 of the function represents the index of the source element.
            
             <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                 the input sequence starting at the first element in the linear series that
                 does not pass the test specified by predicate.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or predicate is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Decimal}})">
            
            <summary>
                Computes the sum of the sequence of nullable System.Decimal values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The sum of the projected values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
                The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Decimal})">
            
             <summary>
                 Computes the sum of the sequence of System.Decimal values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The sum of the projected values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The sum is larger than System.Decimal.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Double}})">
            
             <summary>
                 Computes the sum of the sequence of nullable System.Double values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The sum of the projected values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Double})">
            
            <summary>
                Computes the sum of the sequence of System.Double values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The sum of the projected values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Single}})">
            
            <summary>
                Computes the sum of the sequence of nullable System.Single values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The sum of the projected values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Single})">
            
            <summary>
                Computes the sum of the sequence of System.Single values that are obtained
                by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The sum of the projected values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Int32}})">
            
            <summary>
                Computes the sum of the sequence of nullable System.Int32 values that are
                obtained by invoking a transform function on each element of the input sequence.
            </summary>
            
            <param name="selector">
                A transform function to apply to each element.
            </param>
            
            <returns>
                The sum of the projected values.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or selector is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
                The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Int32})">
            
             <summary>
                 Computes the sum of the sequence of System.Int32 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The sum of the projected values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int32.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Nullable{System.Int64}})">
            
             <summary>
                 Computes the sum of the sequence of nullable System.Int64 values that are
                 obtained by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The sum of the projected values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Sum(System.Func{`0,System.Int64})">
            
             <summary>
                 Computes the sum of the sequence of System.Int64 values that are obtained
                 by invoking a transform function on each element of the input sequence.
             </summary>
             
             <param name="selector">
                 A transform function to apply to each element.
             </param>
             
             <returns>
                 The sum of the projected values.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source or selector is null.
             </exception>
             
             <exception cref="T:System.OverflowException">
                 The sum is larger than System.Int64.MaxValue.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Take(System.Int32)">
            
             <summary>
                 Returns a specified number of contiguous elements from the start of a sequence.
             </summary>
             
             <param name="count">
                 The number of elements to return.
             </param>
             
             <returns>
                 A Trinity.Index.LINQ.PLINQWrapper{T} that contains the specified
                 number of elements from the start of the input sequence.
             </returns>
             
             <exception cref="T:System.ArgumentNullException">
                 source is null.
             </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.TakeWhile(System.Func{`0,System.Boolean})">
            
            <summary>
                Returns elements from a sequence as long as a specified condition is true.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains the elements from
                the input sequence that occur before the element at which the test no longer
                passes.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})">
            
            <summary>
                Returns elements from a sequence as long as a specified condition is true.
                The element's index is used in the logic of the predicate function.
            </summary>
            
            <param name="predicate">
                A function to test each source element for a condition; the second parameter
            </param>
                of the function represents the index of the source element.
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that occur before the element at which the test no longer
                passes.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Where(System.Func{`0,System.Boolean})">
            
            <summary>
                Filters a sequence of values based on a predicate.
            </summary>
            
            <param name="predicate">
                A function to test each element for a condition.
            </param>
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that satisfy the condition.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Where(System.Func{`0,System.Int32,System.Boolean})">
            
            <summary>
                Filters a sequence of values based on a predicate. Each element's index is
                used in the logic of the predicate function.
            </summary>
            
            <param name="predicate">
                A function to test each source element for a condition; the second parameter
            </param>
                of the function represents the index of the source element.
            
            <returns>
                A Trinity.Index.LINQ.PLINQWrapper{T} that contains elements from
                the input sequence that satisfy the condition.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
                source or predicate is null.
            </exception>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Concat(System.Collections.Generic.IEnumerable{`0})">
            
            <summary>
                Concatenates two sequences.
            </summary>
            !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.DefaultIfEmpty">
            
             <summary>
                 Returns the elements of the specified sequence or the type parameter's default
                 value in a singleton collection if the sequence is empty.
             </summary>
             !NotImplemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.DefaultIfEmpty(`0)">
            
             <summary>
                 Returns the elements of the specified sequence or the specified value in
                 a singleton collection if the sequence is empty.
             </summary>
             !NotImplemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.OfType``1">
            
             <summary>
                 Filters the elements of an System.Collections.IEnumerable based on a specified
                 type.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.OrderBy``1(System.Func{`0,``0})">
            
             <summary>
                 Sorts the elements of a sequence in ascending order according to a key.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.OrderBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            
             <summary>
                 Sorts the elements of a sequence in ascending order by using a specified
                 comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.OrderByDescending``1(System.Func{`0,``0})">
            
             <summary>
                 Sorts the elements of a sequence in descending order according to a key.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.OrderByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            
             <summary>
                 Sorts the elements of a sequence in descending order by using a specified
                 comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Reverse">
            
             <summary>
                 Inverts the order of the elements in a sequence.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Distinct">
            
             <summary>
                 Returns distinct elements from a sequence by using the default equality comparer
                 to compare values.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
            
             <summary>
                 Returns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer{T}
                 to compare values.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ElementAt(System.Int32)">
            
             <summary>
                 Returns the element at a specified index in a sequence.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ElementAtOrDefault(System.Int32)">
            
             <summary>
                 Returns the element at a specified index in a sequence or a default value
                 if the index is out of range.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Except(System.Collections.Generic.IEnumerable{`0})">
            
             <summary>
                 Produces the set difference of two sequences by using the default equality
                 comparer to compare values.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Except(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            
             <summary>
                 Produces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer{T}
                 to compare values.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``1(System.Func{`0,``0})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and projects the elements for each group by using a specified function.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and compares the keys by using a specified comparer.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. The keys are compared
                 by using a specified comparer.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. The elements of each
                 group are projected by using a specified function.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Groups the elements of a sequence according to a key selector function. The
                 keys are compared by using a comparer and each group's elements are projected
                 by using a specified function.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Groups the elements of a sequence according to a specified key selector function
                 and creates a result value from each group and its key. Key values are compared
                 by using a specified comparer, and the elements of each group are projected
                 by using a specified function.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            
             <summary>
                 Correlates the elements of two sequences based on equality of keys and groups
                 the results. The default equality comparer is used to compare keys.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            
             <summary>
                 Correlates the elements of two sequences based on key equality and groups
                 the results. A specified System.Collections.Generic.IEqualityComparer{T}
                 is used to compare keys.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
            
             <summary>
                 Produces the set intersection of two sequences by using the default equality
                 comparer to compare values.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Intersect(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Produces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer{T}
                to compare values.
            </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            
             <summary>
                 Correlates the elements of two sequences based on matching keys. The default
                 equality comparer is used to compare keys.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            
             <summary>
                 Correlates the elements of two sequences based on matching keys. A specified
                 System.Collections.Generic.IEqualityComparer{T} is used to compare keys.
             </summary>
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ThenBy``1(System.Func{`0,``0})">
            
             <summary>
                 Performs a subsequent ordering of the elements in a sequence in ascending
                 order according to a key.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ThenBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            
             <summary>
                 Performs a subsequent ordering of the elements in a sequence in ascending
                 order by using a specified comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ThenByDescending``1(System.Func{`0,``0})">
            
             <summary>
                 Performs a subsequent ordering of the elements in a sequence in descending
                 order, according to a key.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ThenByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            
             <summary>
                 Performs a subsequent ordering of the elements in a sequence in descending
                 order by using a specified comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToArray">
            
             <summary>
                 Creates an array from a System.Collections.Generic.IEnumerable{T}.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToDictionary``1(System.Func{`0,``0})">
            
             <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1})">
            
             <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to specified key selector and element selector functions.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToDictionary``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function and key comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Creates a System.Collections.Generic.Dictionary{TKey,TValue} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function, a comparer, and an element
                 selector function.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToList">
            
             <summary>
                 Creates a System.Collections.Generic.List{T} from an System.Collections.Generic.IEnumerable{T}.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToLookup``1(System.Func{`0,``0})">
            
             <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1})">
            
             <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to specified key selector and element selector functions.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToLookup``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function and key comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            
             <summary>
                 Creates a System.Linq.Lookup{TKey,TElement} from an System.Collections.Generic.IEnumerable{T}
                 according to a specified key selector function, a comparer and an element
                 selector function.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Union(System.Collections.Generic.IEnumerable{`0})">
            
             <summary>
                 Produces the set union of two sequences by using the default equality comparer.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Union(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            
             <summary>
                 Produces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer{T}.
             </summary>
             !Not implemented
        </member>
        <member name="M:TSLProject1.Linq.PLINQWrapper`1.Zip``3(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            
             <summary>
                 Merges two sequences by using the specified predicate function.
             </summary>
             !Not implemented
        </member>
    </members>
</doc>
